// Autogenerated from Pigeon (v3.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "messages.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface FCPListItemMessage ()
+ (FCPListItemMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPListItemMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPListSectionMessage ()
+ (FCPListSectionMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPListSectionMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPBarButtonMessage ()
+ (FCPBarButtonMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPBarButtonMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPListTemplateMessage ()
+ (FCPListTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPListTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPAlertActionMessage ()
+ (FCPAlertActionMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPAlertActionMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPAlertTemplateMessage ()
+ (FCPAlertTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPAlertTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPActionSheetTemplateMessage ()
+ (FCPActionSheetTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPActionSheetTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPTextButtonMessage ()
+ (FCPTextButtonMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPTextButtonMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPGridButtonMessage ()
+ (FCPGridButtonMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPGridButtonMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPGridTemplateMessage ()
+ (FCPGridTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPGridTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPInformationItemMessage ()
+ (FCPInformationItemMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPInformationItemMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPInformationTemplateMessage ()
+ (FCPInformationTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPInformationTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPNowPlayingImageButtonMessage ()
+ (FCPNowPlayingImageButtonMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPNowPlayingImageButtonMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPNowPlayingButtonMessage ()
+ (FCPNowPlayingButtonMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPNowPlayingButtonMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPConnectionStatusChangeMessage ()
+ (FCPConnectionStatusChangeMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPConnectionStatusChangeMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPPointOfInterestMessage ()
+ (FCPPointOfInterestMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPPointOfInterestMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPPointOfInterestTemplateMessage ()
+ (FCPPointOfInterestTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPPointOfInterestTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPTabBarTemplateMessage ()
+ (FCPTabBarTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPTabBarTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPTemplateMessage ()
+ (FCPTemplateMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPTemplateMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end
@interface FCPImageMessage ()
+ (FCPImageMessage *)fromMap:(NSDictionary *)dict;
+ (nullable FCPImageMessage *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation FCPListItemMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    text:(NSString *)text
    detailText:(nullable NSString *)detailText
    image:(nullable FCPImageMessage *)image
    playbackProgress:(nullable NSNumber *)playbackProgress
    isPlaying:(nullable NSNumber *)isPlaying
    onPress:(NSNumber *)onPress
    playingIndicatorLocation:(FCPListItemPlayingIndicatorLocation)playingIndicatorLocation
    accessoryType:(FCPListItemAccessoryType)accessoryType {
  FCPListItemMessage* pigeonResult = [[FCPListItemMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.text = text;
  pigeonResult.detailText = detailText;
  pigeonResult.image = image;
  pigeonResult.playbackProgress = playbackProgress;
  pigeonResult.isPlaying = isPlaying;
  pigeonResult.onPress = onPress;
  pigeonResult.playingIndicatorLocation = playingIndicatorLocation;
  pigeonResult.accessoryType = accessoryType;
  return pigeonResult;
}
+ (FCPListItemMessage *)fromMap:(NSDictionary *)dict {
  FCPListItemMessage *pigeonResult = [[FCPListItemMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.text = GetNullableObject(dict, @"text");
  NSAssert(pigeonResult.text != nil, @"");
  pigeonResult.detailText = GetNullableObject(dict, @"detailText");
  pigeonResult.image = [FCPImageMessage nullableFromMap:GetNullableObject(dict, @"image")];
  pigeonResult.playbackProgress = GetNullableObject(dict, @"playbackProgress");
  pigeonResult.isPlaying = GetNullableObject(dict, @"isPlaying");
  pigeonResult.onPress = GetNullableObject(dict, @"onPress");
  NSAssert(pigeonResult.onPress != nil, @"");
  pigeonResult.playingIndicatorLocation = [GetNullableObject(dict, @"playingIndicatorLocation") integerValue];
  pigeonResult.accessoryType = [GetNullableObject(dict, @"accessoryType") integerValue];
  return pigeonResult;
}
+ (nullable FCPListItemMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPListItemMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"text" : (self.text ?: [NSNull null]),
    @"detailText" : (self.detailText ?: [NSNull null]),
    @"image" : (self.image ? [self.image toMap] : [NSNull null]),
    @"playbackProgress" : (self.playbackProgress ?: [NSNull null]),
    @"isPlaying" : (self.isPlaying ?: [NSNull null]),
    @"onPress" : (self.onPress ?: [NSNull null]),
    @"playingIndicatorLocation" : @(self.playingIndicatorLocation),
    @"accessoryType" : @(self.accessoryType),
  };
}
@end

@implementation FCPListSectionMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    header:(nullable NSString *)header
    items:(NSArray<FCPListItemMessage *> *)items {
  FCPListSectionMessage* pigeonResult = [[FCPListSectionMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.header = header;
  pigeonResult.items = items;
  return pigeonResult;
}
+ (FCPListSectionMessage *)fromMap:(NSDictionary *)dict {
  FCPListSectionMessage *pigeonResult = [[FCPListSectionMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.header = GetNullableObject(dict, @"header");
  pigeonResult.items = GetNullableObject(dict, @"items");
  NSAssert(pigeonResult.items != nil, @"");
  return pigeonResult;
}
+ (nullable FCPListSectionMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPListSectionMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"header" : (self.header ?: [NSNull null]),
    @"items" : (self.items ?: [NSNull null]),
  };
}
@end

@implementation FCPBarButtonMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    style:(FCPBarButtonStyle)style {
  FCPBarButtonMessage* pigeonResult = [[FCPBarButtonMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.style = style;
  return pigeonResult;
}
+ (FCPBarButtonMessage *)fromMap:(NSDictionary *)dict {
  FCPBarButtonMessage *pigeonResult = [[FCPBarButtonMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.style = [GetNullableObject(dict, @"style") integerValue];
  return pigeonResult;
}
+ (nullable FCPBarButtonMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPBarButtonMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"style" : @(self.style),
  };
}
@end

@implementation FCPListTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(nullable NSString *)title
    sections:(NSArray<FCPListSectionMessage *> *)sections
    emptyViewTitleVariants:(nullable NSArray<NSString *> *)emptyViewTitleVariants
    emptyViewSubtitleVariants:(nullable NSArray<NSString *> *)emptyViewSubtitleVariants
    showsTabBadge:(NSNumber *)showsTabBadge
    systemIcon:(NSString *)systemIcon
    backButton:(nullable FCPBarButtonMessage *)backButton {
  FCPListTemplateMessage* pigeonResult = [[FCPListTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.sections = sections;
  pigeonResult.emptyViewTitleVariants = emptyViewTitleVariants;
  pigeonResult.emptyViewSubtitleVariants = emptyViewSubtitleVariants;
  pigeonResult.showsTabBadge = showsTabBadge;
  pigeonResult.systemIcon = systemIcon;
  pigeonResult.backButton = backButton;
  return pigeonResult;
}
+ (FCPListTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPListTemplateMessage *pigeonResult = [[FCPListTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  pigeonResult.sections = GetNullableObject(dict, @"sections");
  NSAssert(pigeonResult.sections != nil, @"");
  pigeonResult.emptyViewTitleVariants = GetNullableObject(dict, @"emptyViewTitleVariants");
  pigeonResult.emptyViewSubtitleVariants = GetNullableObject(dict, @"emptyViewSubtitleVariants");
  pigeonResult.showsTabBadge = GetNullableObject(dict, @"showsTabBadge");
  NSAssert(pigeonResult.showsTabBadge != nil, @"");
  pigeonResult.systemIcon = GetNullableObject(dict, @"systemIcon");
  NSAssert(pigeonResult.systemIcon != nil, @"");
  pigeonResult.backButton = [FCPBarButtonMessage nullableFromMap:GetNullableObject(dict, @"backButton")];
  return pigeonResult;
}
+ (nullable FCPListTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPListTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"sections" : (self.sections ?: [NSNull null]),
    @"emptyViewTitleVariants" : (self.emptyViewTitleVariants ?: [NSNull null]),
    @"emptyViewSubtitleVariants" : (self.emptyViewSubtitleVariants ?: [NSNull null]),
    @"showsTabBadge" : (self.showsTabBadge ?: [NSNull null]),
    @"systemIcon" : (self.systemIcon ?: [NSNull null]),
    @"backButton" : (self.backButton ? [self.backButton toMap] : [NSNull null]),
  };
}
@end

@implementation FCPAlertActionMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    style:(FCPAlertActionStyle)style {
  FCPAlertActionMessage* pigeonResult = [[FCPAlertActionMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.style = style;
  return pigeonResult;
}
+ (FCPAlertActionMessage *)fromMap:(NSDictionary *)dict {
  FCPAlertActionMessage *pigeonResult = [[FCPAlertActionMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.style = [GetNullableObject(dict, @"style") integerValue];
  return pigeonResult;
}
+ (nullable FCPAlertActionMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPAlertActionMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"style" : @(self.style),
  };
}
@end

@implementation FCPAlertTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    titleVariants:(NSArray<NSString *> *)titleVariants
    actions:(NSArray<FCPAlertActionMessage *> *)actions
    onPresent:(NSNumber *)onPresent {
  FCPAlertTemplateMessage* pigeonResult = [[FCPAlertTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.titleVariants = titleVariants;
  pigeonResult.actions = actions;
  pigeonResult.onPresent = onPresent;
  return pigeonResult;
}
+ (FCPAlertTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPAlertTemplateMessage *pigeonResult = [[FCPAlertTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.titleVariants = GetNullableObject(dict, @"titleVariants");
  NSAssert(pigeonResult.titleVariants != nil, @"");
  pigeonResult.actions = GetNullableObject(dict, @"actions");
  NSAssert(pigeonResult.actions != nil, @"");
  pigeonResult.onPresent = GetNullableObject(dict, @"onPresent");
  NSAssert(pigeonResult.onPresent != nil, @"");
  return pigeonResult;
}
+ (nullable FCPAlertTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPAlertTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"titleVariants" : (self.titleVariants ?: [NSNull null]),
    @"actions" : (self.actions ?: [NSNull null]),
    @"onPresent" : (self.onPresent ?: [NSNull null]),
  };
}
@end

@implementation FCPActionSheetTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(nullable NSString *)title
    message:(nullable NSString *)message
    actions:(NSArray<FCPAlertActionMessage *> *)actions {
  FCPActionSheetTemplateMessage* pigeonResult = [[FCPActionSheetTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.message = message;
  pigeonResult.actions = actions;
  return pigeonResult;
}
+ (FCPActionSheetTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPActionSheetTemplateMessage *pigeonResult = [[FCPActionSheetTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  pigeonResult.message = GetNullableObject(dict, @"message");
  pigeonResult.actions = GetNullableObject(dict, @"actions");
  NSAssert(pigeonResult.actions != nil, @"");
  return pigeonResult;
}
+ (nullable FCPActionSheetTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPActionSheetTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"message" : (self.message ?: [NSNull null]),
    @"actions" : (self.actions ?: [NSNull null]),
  };
}
@end

@implementation FCPTextButtonMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    style:(FCPTextButtonStyle)style {
  FCPTextButtonMessage* pigeonResult = [[FCPTextButtonMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.style = style;
  return pigeonResult;
}
+ (FCPTextButtonMessage *)fromMap:(NSDictionary *)dict {
  FCPTextButtonMessage *pigeonResult = [[FCPTextButtonMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.style = [GetNullableObject(dict, @"style") integerValue];
  return pigeonResult;
}
+ (nullable FCPTextButtonMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPTextButtonMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"style" : @(self.style),
  };
}
@end

@implementation FCPGridButtonMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    titleVariants:(NSArray<NSString *> *)titleVariants
    image:(FCPImageMessage *)image {
  FCPGridButtonMessage* pigeonResult = [[FCPGridButtonMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.titleVariants = titleVariants;
  pigeonResult.image = image;
  return pigeonResult;
}
+ (FCPGridButtonMessage *)fromMap:(NSDictionary *)dict {
  FCPGridButtonMessage *pigeonResult = [[FCPGridButtonMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.titleVariants = GetNullableObject(dict, @"titleVariants");
  NSAssert(pigeonResult.titleVariants != nil, @"");
  pigeonResult.image = [FCPImageMessage nullableFromMap:GetNullableObject(dict, @"image")];
  NSAssert(pigeonResult.image != nil, @"");
  return pigeonResult;
}
+ (nullable FCPGridButtonMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPGridButtonMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"titleVariants" : (self.titleVariants ?: [NSNull null]),
    @"image" : (self.image ? [self.image toMap] : [NSNull null]),
  };
}
@end

@implementation FCPGridTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    buttons:(NSArray<FCPGridButtonMessage *> *)buttons {
  FCPGridTemplateMessage* pigeonResult = [[FCPGridTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.buttons = buttons;
  return pigeonResult;
}
+ (FCPGridTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPGridTemplateMessage *pigeonResult = [[FCPGridTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.buttons = GetNullableObject(dict, @"buttons");
  NSAssert(pigeonResult.buttons != nil, @"");
  return pigeonResult;
}
+ (nullable FCPGridTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPGridTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"buttons" : (self.buttons ?: [NSNull null]),
  };
}
@end

@implementation FCPInformationItemMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(nullable NSString *)title
    detail:(nullable NSString *)detail {
  FCPInformationItemMessage* pigeonResult = [[FCPInformationItemMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.detail = detail;
  return pigeonResult;
}
+ (FCPInformationItemMessage *)fromMap:(NSDictionary *)dict {
  FCPInformationItemMessage *pigeonResult = [[FCPInformationItemMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  pigeonResult.detail = GetNullableObject(dict, @"detail");
  return pigeonResult;
}
+ (nullable FCPInformationItemMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPInformationItemMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"detail" : (self.detail ?: [NSNull null]),
  };
}
@end

@implementation FCPInformationTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    layout:(FCPInformationTemplateLayout)layout
    actions:(NSArray<FCPTextButtonMessage *> *)actions
    informationItems:(NSArray<FCPInformationItemMessage *> *)informationItems {
  FCPInformationTemplateMessage* pigeonResult = [[FCPInformationTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.layout = layout;
  pigeonResult.actions = actions;
  pigeonResult.informationItems = informationItems;
  return pigeonResult;
}
+ (FCPInformationTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPInformationTemplateMessage *pigeonResult = [[FCPInformationTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.layout = [GetNullableObject(dict, @"layout") integerValue];
  pigeonResult.actions = GetNullableObject(dict, @"actions");
  NSAssert(pigeonResult.actions != nil, @"");
  pigeonResult.informationItems = GetNullableObject(dict, @"informationItems");
  NSAssert(pigeonResult.informationItems != nil, @"");
  return pigeonResult;
}
+ (nullable FCPInformationTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPInformationTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"layout" : @(self.layout),
    @"actions" : (self.actions ?: [NSNull null]),
    @"informationItems" : (self.informationItems ?: [NSNull null]),
  };
}
@end

@implementation FCPNowPlayingImageButtonMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    isEnabled:(NSNumber *)isEnabled
    isSelected:(NSNumber *)isSelected
    image:(FCPImageMessage *)image {
  FCPNowPlayingImageButtonMessage* pigeonResult = [[FCPNowPlayingImageButtonMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.isEnabled = isEnabled;
  pigeonResult.isSelected = isSelected;
  pigeonResult.image = image;
  return pigeonResult;
}
+ (FCPNowPlayingImageButtonMessage *)fromMap:(NSDictionary *)dict {
  FCPNowPlayingImageButtonMessage *pigeonResult = [[FCPNowPlayingImageButtonMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.isEnabled = GetNullableObject(dict, @"isEnabled");
  NSAssert(pigeonResult.isEnabled != nil, @"");
  pigeonResult.isSelected = GetNullableObject(dict, @"isSelected");
  NSAssert(pigeonResult.isSelected != nil, @"");
  pigeonResult.image = [FCPImageMessage nullableFromMap:GetNullableObject(dict, @"image")];
  NSAssert(pigeonResult.image != nil, @"");
  return pigeonResult;
}
+ (nullable FCPNowPlayingImageButtonMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPNowPlayingImageButtonMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"isEnabled" : (self.isEnabled ?: [NSNull null]),
    @"isSelected" : (self.isSelected ?: [NSNull null]),
    @"image" : (self.image ? [self.image toMap] : [NSNull null]),
  };
}
@end

@implementation FCPNowPlayingButtonMessage
+ (instancetype)makeWithImageButton:(nullable FCPNowPlayingImageButtonMessage *)imageButton {
  FCPNowPlayingButtonMessage* pigeonResult = [[FCPNowPlayingButtonMessage alloc] init];
  pigeonResult.imageButton = imageButton;
  return pigeonResult;
}
+ (FCPNowPlayingButtonMessage *)fromMap:(NSDictionary *)dict {
  FCPNowPlayingButtonMessage *pigeonResult = [[FCPNowPlayingButtonMessage alloc] init];
  pigeonResult.imageButton = [FCPNowPlayingImageButtonMessage nullableFromMap:GetNullableObject(dict, @"imageButton")];
  return pigeonResult;
}
+ (nullable FCPNowPlayingButtonMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPNowPlayingButtonMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"imageButton" : (self.imageButton ? [self.imageButton toMap] : [NSNull null]),
  };
}
@end

@implementation FCPConnectionStatusChangeMessage
+ (instancetype)makeWithStatus:(FCPConnectionStatus)status {
  FCPConnectionStatusChangeMessage* pigeonResult = [[FCPConnectionStatusChangeMessage alloc] init];
  pigeonResult.status = status;
  return pigeonResult;
}
+ (FCPConnectionStatusChangeMessage *)fromMap:(NSDictionary *)dict {
  FCPConnectionStatusChangeMessage *pigeonResult = [[FCPConnectionStatusChangeMessage alloc] init];
  pigeonResult.status = [GetNullableObject(dict, @"status") integerValue];
  return pigeonResult;
}
+ (nullable FCPConnectionStatusChangeMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPConnectionStatusChangeMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"status" : @(self.status),
  };
}
@end

@implementation FCPPointOfInterestMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    latitude:(NSNumber *)latitude
    longitude:(NSNumber *)longitude
    title:(NSString *)title
    subtitle:(nullable NSString *)subtitle
    summary:(nullable NSString *)summary
    detailTitle:(nullable NSString *)detailTitle
    detailsSubtitle:(nullable NSString *)detailsSubtitle
    detailSummary:(nullable NSString *)detailSummary
    image:(nullable FCPImageMessage *)image
    primaryButton:(nullable FCPTextButtonMessage *)primaryButton
    secondaryButton:(nullable FCPTextButtonMessage *)secondaryButton {
  FCPPointOfInterestMessage* pigeonResult = [[FCPPointOfInterestMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.latitude = latitude;
  pigeonResult.longitude = longitude;
  pigeonResult.title = title;
  pigeonResult.subtitle = subtitle;
  pigeonResult.summary = summary;
  pigeonResult.detailTitle = detailTitle;
  pigeonResult.detailsSubtitle = detailsSubtitle;
  pigeonResult.detailSummary = detailSummary;
  pigeonResult.image = image;
  pigeonResult.primaryButton = primaryButton;
  pigeonResult.secondaryButton = secondaryButton;
  return pigeonResult;
}
+ (FCPPointOfInterestMessage *)fromMap:(NSDictionary *)dict {
  FCPPointOfInterestMessage *pigeonResult = [[FCPPointOfInterestMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.latitude = GetNullableObject(dict, @"latitude");
  NSAssert(pigeonResult.latitude != nil, @"");
  pigeonResult.longitude = GetNullableObject(dict, @"longitude");
  NSAssert(pigeonResult.longitude != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.subtitle = GetNullableObject(dict, @"subtitle");
  pigeonResult.summary = GetNullableObject(dict, @"summary");
  pigeonResult.detailTitle = GetNullableObject(dict, @"detailTitle");
  pigeonResult.detailsSubtitle = GetNullableObject(dict, @"detailsSubtitle");
  pigeonResult.detailSummary = GetNullableObject(dict, @"detailSummary");
  pigeonResult.image = [FCPImageMessage nullableFromMap:GetNullableObject(dict, @"image")];
  pigeonResult.primaryButton = [FCPTextButtonMessage nullableFromMap:GetNullableObject(dict, @"primaryButton")];
  pigeonResult.secondaryButton = [FCPTextButtonMessage nullableFromMap:GetNullableObject(dict, @"secondaryButton")];
  return pigeonResult;
}
+ (nullable FCPPointOfInterestMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPPointOfInterestMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"latitude" : (self.latitude ?: [NSNull null]),
    @"longitude" : (self.longitude ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"subtitle" : (self.subtitle ?: [NSNull null]),
    @"summary" : (self.summary ?: [NSNull null]),
    @"detailTitle" : (self.detailTitle ?: [NSNull null]),
    @"detailsSubtitle" : (self.detailsSubtitle ?: [NSNull null]),
    @"detailSummary" : (self.detailSummary ?: [NSNull null]),
    @"image" : (self.image ? [self.image toMap] : [NSNull null]),
    @"primaryButton" : (self.primaryButton ? [self.primaryButton toMap] : [NSNull null]),
    @"secondaryButton" : (self.secondaryButton ? [self.secondaryButton toMap] : [NSNull null]),
  };
}
@end

@implementation FCPPointOfInterestTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(NSString *)title
    poi:(NSArray<FCPPointOfInterestMessage *> *)poi {
  FCPPointOfInterestTemplateMessage* pigeonResult = [[FCPPointOfInterestTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.poi = poi;
  return pigeonResult;
}
+ (FCPPointOfInterestTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPPointOfInterestTemplateMessage *pigeonResult = [[FCPPointOfInterestTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  NSAssert(pigeonResult.title != nil, @"");
  pigeonResult.poi = GetNullableObject(dict, @"poi");
  NSAssert(pigeonResult.poi != nil, @"");
  return pigeonResult;
}
+ (nullable FCPPointOfInterestTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPPointOfInterestTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"poi" : (self.poi ?: [NSNull null]),
  };
}
@end

@implementation FCPTabBarTemplateMessage
+ (instancetype)makeWithElementId:(NSString *)elementId
    title:(nullable NSString *)title
    templates:(NSArray<FCPListTemplateMessage *> *)templates {
  FCPTabBarTemplateMessage* pigeonResult = [[FCPTabBarTemplateMessage alloc] init];
  pigeonResult.elementId = elementId;
  pigeonResult.title = title;
  pigeonResult.templates = templates;
  return pigeonResult;
}
+ (FCPTabBarTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPTabBarTemplateMessage *pigeonResult = [[FCPTabBarTemplateMessage alloc] init];
  pigeonResult.elementId = GetNullableObject(dict, @"elementId");
  NSAssert(pigeonResult.elementId != nil, @"");
  pigeonResult.title = GetNullableObject(dict, @"title");
  pigeonResult.templates = GetNullableObject(dict, @"templates");
  NSAssert(pigeonResult.templates != nil, @"");
  return pigeonResult;
}
+ (nullable FCPTabBarTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPTabBarTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"elementId" : (self.elementId ?: [NSNull null]),
    @"title" : (self.title ?: [NSNull null]),
    @"templates" : (self.templates ?: [NSNull null]),
  };
}
@end

@implementation FCPTemplateMessage
+ (instancetype)makeWithGrid:(nullable FCPGridTemplateMessage *)grid
    information:(nullable FCPInformationTemplateMessage *)information
    list:(nullable FCPListTemplateMessage *)list
    poi:(nullable FCPPointOfInterestTemplateMessage *)poi
    tabBar:(nullable FCPTabBarTemplateMessage *)tabBar {
  FCPTemplateMessage* pigeonResult = [[FCPTemplateMessage alloc] init];
  pigeonResult.grid = grid;
  pigeonResult.information = information;
  pigeonResult.list = list;
  pigeonResult.poi = poi;
  pigeonResult.tabBar = tabBar;
  return pigeonResult;
}
+ (FCPTemplateMessage *)fromMap:(NSDictionary *)dict {
  FCPTemplateMessage *pigeonResult = [[FCPTemplateMessage alloc] init];
  pigeonResult.grid = [FCPGridTemplateMessage nullableFromMap:GetNullableObject(dict, @"grid")];
  pigeonResult.information = [FCPInformationTemplateMessage nullableFromMap:GetNullableObject(dict, @"information")];
  pigeonResult.list = [FCPListTemplateMessage nullableFromMap:GetNullableObject(dict, @"list")];
  pigeonResult.poi = [FCPPointOfInterestTemplateMessage nullableFromMap:GetNullableObject(dict, @"poi")];
  pigeonResult.tabBar = [FCPTabBarTemplateMessage nullableFromMap:GetNullableObject(dict, @"tabBar")];
  return pigeonResult;
}
+ (nullable FCPTemplateMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPTemplateMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"grid" : (self.grid ? [self.grid toMap] : [NSNull null]),
    @"information" : (self.information ? [self.information toMap] : [NSNull null]),
    @"list" : (self.list ? [self.list toMap] : [NSNull null]),
    @"poi" : (self.poi ? [self.poi toMap] : [NSNull null]),
    @"tabBar" : (self.tabBar ? [self.tabBar toMap] : [NSNull null]),
  };
}
@end

@implementation FCPImageMessage
+ (instancetype)makeWithSystemName:(nullable NSString *)systemName
    flutterAsset:(nullable NSString *)flutterAsset
    base64:(nullable NSString *)base64 {
  FCPImageMessage* pigeonResult = [[FCPImageMessage alloc] init];
  pigeonResult.systemName = systemName;
  pigeonResult.flutterAsset = flutterAsset;
  pigeonResult.base64 = base64;
  return pigeonResult;
}
+ (FCPImageMessage *)fromMap:(NSDictionary *)dict {
  FCPImageMessage *pigeonResult = [[FCPImageMessage alloc] init];
  pigeonResult.systemName = GetNullableObject(dict, @"systemName");
  pigeonResult.flutterAsset = GetNullableObject(dict, @"flutterAsset");
  pigeonResult.base64 = GetNullableObject(dict, @"base64");
  return pigeonResult;
}
+ (nullable FCPImageMessage *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [FCPImageMessage fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"systemName" : (self.systemName ?: [NSNull null]),
    @"flutterAsset" : (self.flutterAsset ?: [NSNull null]),
    @"base64" : (self.base64 ?: [NSNull null]),
  };
}
@end

@interface FCarplayApiCodecReader : FlutterStandardReader
@end
@implementation FCarplayApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FCPActionSheetTemplateMessage fromMap:[self readValue]];
    
    case 129:     
      return [FCPAlertActionMessage fromMap:[self readValue]];
    
    case 130:     
      return [FCPAlertTemplateMessage fromMap:[self readValue]];
    
    case 131:     
      return [FCPBarButtonMessage fromMap:[self readValue]];
    
    case 132:     
      return [FCPGridButtonMessage fromMap:[self readValue]];
    
    case 133:     
      return [FCPGridTemplateMessage fromMap:[self readValue]];
    
    case 134:     
      return [FCPImageMessage fromMap:[self readValue]];
    
    case 135:     
      return [FCPImageMessage fromMap:[self readValue]];
    
    case 136:     
      return [FCPInformationItemMessage fromMap:[self readValue]];
    
    case 137:     
      return [FCPInformationTemplateMessage fromMap:[self readValue]];
    
    case 138:     
      return [FCPListItemMessage fromMap:[self readValue]];
    
    case 139:     
      return [FCPListSectionMessage fromMap:[self readValue]];
    
    case 140:     
      return [FCPListTemplateMessage fromMap:[self readValue]];
    
    case 141:     
      return [FCPNowPlayingButtonMessage fromMap:[self readValue]];
    
    case 142:     
      return [FCPNowPlayingImageButtonMessage fromMap:[self readValue]];
    
    case 143:     
      return [FCPPointOfInterestMessage fromMap:[self readValue]];
    
    case 144:     
      return [FCPPointOfInterestTemplateMessage fromMap:[self readValue]];
    
    case 145:     
      return [FCPTabBarTemplateMessage fromMap:[self readValue]];
    
    case 146:     
      return [FCPTemplateMessage fromMap:[self readValue]];
    
    case 147:     
      return [FCPTextButtonMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FCarplayApiCodecWriter : FlutterStandardWriter
@end
@implementation FCarplayApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FCPActionSheetTemplateMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPAlertActionMessage class]]) {
    [self writeByte:129];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPAlertTemplateMessage class]]) {
    [self writeByte:130];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPBarButtonMessage class]]) {
    [self writeByte:131];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPGridButtonMessage class]]) {
    [self writeByte:132];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPGridTemplateMessage class]]) {
    [self writeByte:133];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPImageMessage class]]) {
    [self writeByte:134];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPImageMessage class]]) {
    [self writeByte:135];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPInformationItemMessage class]]) {
    [self writeByte:136];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPInformationTemplateMessage class]]) {
    [self writeByte:137];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPListItemMessage class]]) {
    [self writeByte:138];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPListSectionMessage class]]) {
    [self writeByte:139];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPListTemplateMessage class]]) {
    [self writeByte:140];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPNowPlayingButtonMessage class]]) {
    [self writeByte:141];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPNowPlayingImageButtonMessage class]]) {
    [self writeByte:142];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPPointOfInterestMessage class]]) {
    [self writeByte:143];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPPointOfInterestTemplateMessage class]]) {
    [self writeByte:144];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPTabBarTemplateMessage class]]) {
    [self writeByte:145];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPTemplateMessage class]]) {
    [self writeByte:146];
    [self writeValue:[value toMap]];
  } else 
  if ([value isKindOfClass:[FCPTextButtonMessage class]]) {
    [self writeByte:147];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FCarplayApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FCarplayApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FCarplayApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FCarplayApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FCarplayApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FCarplayApiCodecReaderWriter *readerWriter = [[FCarplayApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void FCarplayApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<FCarplayApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.setRootTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setRootTemplateTemplate:animate:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(setRootTemplateTemplate:animate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FCPTemplateMessage *arg_template = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_animate = GetNullableObjectAtIndex(args, 1);
        [api setRootTemplateTemplate:arg_template animate:arg_animate completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.pushTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pushTemplateTemplate:animate:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(pushTemplateTemplate:animate:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FCPTemplateMessage *arg_template = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_animate = GetNullableObjectAtIndex(args, 1);
        [api pushTemplateTemplate:arg_template animate:arg_animate completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.pushNowPlaying"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(pushNowPlayingAnimated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(pushNowPlayingAnimated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 0);
        [api pushNowPlayingAnimated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.popTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(popTemplateAnimated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(popTemplateAnimated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 0);
        [api popTemplateAnimated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.popToRootTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(popToRootTemplateAnimated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(popToRootTemplateAnimated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 0);
        [api popToRootTemplateAnimated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.presentAlertTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(presentAlertTemplateTemplate:animated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(presentAlertTemplateTemplate:animated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FCPAlertTemplateMessage *arg_template = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 1);
        [api presentAlertTemplateTemplate:arg_template animated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.presentActionSheetTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(presentActionSheetTemplateTemplate:animated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(presentActionSheetTemplateTemplate:animated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FCPActionSheetTemplateMessage *arg_template = GetNullableObjectAtIndex(args, 0);
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 1);
        [api presentActionSheetTemplateTemplate:arg_template animated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.dismissTemplate"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(dismissTemplateAnimated:completion:)], @"FCarplayApi api (%@) doesn't respond to @selector(dismissTemplateAnimated:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_animated = GetNullableObjectAtIndex(args, 0);
        [api dismissTemplateAnimated:arg_animated completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.updateNowPlayingButtons"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateNowPlayingButtonsButtons:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(updateNowPlayingButtonsButtons:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSArray<FCPNowPlayingButtonMessage *> *arg_buttons = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api updateNowPlayingButtonsButtons:arg_buttons error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.setNowPlayingUpNextButtonTitle"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setNowPlayingUpNextButtonTitleTitle:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(setNowPlayingUpNextButtonTitleTitle:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_title = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api setNowPlayingUpNextButtonTitleTitle:arg_title error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.enableNowPlayingUpNextButton"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(enableNowPlayingUpNextButtonTitle:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(enableNowPlayingUpNextButtonTitle:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_title = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api enableNowPlayingUpNextButtonTitle:arg_title error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.disableNowPlayingUpNextButton"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(disableNowPlayingUpNextButtonWithError:)], @"FCarplayApi api (%@) doesn't respond to @selector(disableNowPlayingUpNextButtonWithError:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        FlutterError *error;
        NSNumber *output = [api disableNowPlayingUpNextButtonWithError:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.updateListItem"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateListItemUpdatedItem:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(updateListItemUpdatedItem:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        FCPListItemMessage *arg_updatedItem = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        NSNumber *output = [api updateListItemUpdatedItem:arg_updatedItem error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.updateListSections"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(updateListSectionsListId:sections:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(updateListSectionsListId:sections:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_listId = GetNullableObjectAtIndex(args, 0);
        NSArray<FCPListSectionMessage *> *arg_sections = GetNullableObjectAtIndex(args, 1);
        FlutterError *error;
        NSNumber *output = [api updateListSectionsListId:arg_listId sections:arg_sections error:&error];
        callback(wrapResult(output, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.CarplayApi.onListItemSelectedComplete"
        binaryMessenger:binaryMessenger
        codec:FCarplayApiGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(onListItemSelectedCompleteListItemId:error:)], @"FCarplayApi api (%@) doesn't respond to @selector(onListItemSelectedCompleteListItemId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_listItemId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api onListItemSelectedCompleteListItemId:arg_listItemId error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
@interface FCarplayEventsApiCodecReader : FlutterStandardReader
@end
@implementation FCarplayEventsApiCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [FCPConnectionStatusChangeMessage fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface FCarplayEventsApiCodecWriter : FlutterStandardWriter
@end
@implementation FCarplayEventsApiCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[FCPConnectionStatusChangeMessage class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface FCarplayEventsApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation FCarplayEventsApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[FCarplayEventsApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[FCarplayEventsApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *FCarplayEventsApiGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    FCarplayEventsApiCodecReaderWriter *readerWriter = [[FCarplayEventsApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


@interface FCarplayEventsApi ()
@property (nonatomic, strong) NSObject<FlutterBinaryMessenger> *binaryMessenger;
@end

@implementation FCarplayEventsApi

- (instancetype)initWithBinaryMessenger:(NSObject<FlutterBinaryMessenger> *)binaryMessenger {
  self = [super init];
  if (self) {
    _binaryMessenger = binaryMessenger;
  }
  return self;
}
- (void)onConnectionChangeData:(FCPConnectionStatusChangeMessage *)arg_data completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onConnectionChange"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_data ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onListItemSelectedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onListItemSelected"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onAlertActionPressedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onAlertActionPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onPresentStateChangedCompleted:(NSNumber *)arg_completed completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onPresentStateChanged"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_completed ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onGridButtonPressedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onGridButtonPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onBarButtonPressedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onBarButtonPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onTextButtonPressedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onTextButtonPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNowPlayingButtonPressedElementId:(NSString *)arg_elementId completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onNowPlayingButtonPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_elementId ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onNowPlayingUpNextButtonPressedWithCompletion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onNowPlayingUpNextButtonPressed"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:nil reply:^(id reply) {
    completion(nil);
  }];
}
- (void)onHistoryStackChangedHistoryStack:(NSArray<NSString *> *)arg_historyStack completion:(void(^)(NSError *_Nullable))completion {
  FlutterBasicMessageChannel *channel =
    [FlutterBasicMessageChannel
      messageChannelWithName:@"dev.flutter.pigeon.CarplayEventsApi.onHistoryStackChanged"
      binaryMessenger:self.binaryMessenger
      codec:FCarplayEventsApiGetCodec()];
  [channel sendMessage:@[arg_historyStack ?: [NSNull null]] reply:^(id reply) {
    completion(nil);
  }];
}
@end
