// Autogenerated from Pigeon (v3.1.5), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name
// @dart = 2.12
import 'dart:async';
import 'dart:typed_data' show Uint8List, Int32List, Int64List, Float64List;

import 'package:flutter/foundation.dart' show WriteBuffer, ReadBuffer;
import 'package:flutter/services.dart';

enum CPListItemPlayingIndicatorLocation {
  trailing,
  leading,
}

enum CPConnectionStatus {
  connected,
  background,
  disconnected,
  unknown,
}

enum CPListItemAccessoryType {
  none,
  cloud,
  disclosureIndicator,
}

enum CPBarButtonStyle {
  none,
  rounded,
}

enum CPInformationTemplateLayout {
  leading,
  twoColumn,
}

enum CPTextButtonStyle {
  normal,
  cancel,
  confirm,
}

enum CPAlertActionStyle {
  normal,
  cancel,
  destructive,
}

class CPListItemMessage {
  CPListItemMessage({
    required this.elementId,
    required this.text,
    this.detailText,
    this.image,
    this.playbackProgress,
    this.isPlaying,
    required this.onPress,
    this.playingIndicatorLocation,
    this.accessoryType,
  });

  String elementId;
  String text;
  String? detailText;
  CPImageMessage? image;
  double? playbackProgress;
  bool? isPlaying;
  bool onPress;
  CPListItemPlayingIndicatorLocation? playingIndicatorLocation;
  CPListItemAccessoryType? accessoryType;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['text'] = text;
    pigeonMap['detailText'] = detailText;
    pigeonMap['image'] = image?.encode();
    pigeonMap['playbackProgress'] = playbackProgress;
    pigeonMap['isPlaying'] = isPlaying;
    pigeonMap['onPress'] = onPress;
    pigeonMap['playingIndicatorLocation'] = playingIndicatorLocation?.index;
    pigeonMap['accessoryType'] = accessoryType?.index;
    return pigeonMap;
  }

  static CPListItemMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPListItemMessage(
      elementId: pigeonMap['elementId']! as String,
      text: pigeonMap['text']! as String,
      detailText: pigeonMap['detailText'] as String?,
      image: pigeonMap['image'] != null
          ? CPImageMessage.decode(pigeonMap['image']!)
          : null,
      playbackProgress: pigeonMap['playbackProgress'] as double?,
      isPlaying: pigeonMap['isPlaying'] as bool?,
      onPress: pigeonMap['onPress']! as bool,
      playingIndicatorLocation: pigeonMap['playingIndicatorLocation'] != null
          ? CPListItemPlayingIndicatorLocation.values[pigeonMap['playingIndicatorLocation']! as int]
          : null,
      accessoryType: pigeonMap['accessoryType'] != null
          ? CPListItemAccessoryType.values[pigeonMap['accessoryType']! as int]
          : null,
    );
  }
}

class CPListSectionMessage {
  CPListSectionMessage({
    required this.elementId,
    this.header,
    required this.items,
  });

  String elementId;
  String? header;
  List<CPListItemMessage?> items;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['header'] = header;
    pigeonMap['items'] = items;
    return pigeonMap;
  }

  static CPListSectionMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPListSectionMessage(
      elementId: pigeonMap['elementId']! as String,
      header: pigeonMap['header'] as String?,
      items: (pigeonMap['items'] as List<Object?>?)!.cast<CPListItemMessage?>(),
    );
  }
}

class CPBarButtonMessage {
  CPBarButtonMessage({
    required this.elementId,
    required this.title,
    required this.style,
  });

  String elementId;
  String title;
  CPBarButtonStyle style;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['style'] = style.index;
    return pigeonMap;
  }

  static CPBarButtonMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPBarButtonMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      style: CPBarButtonStyle.values[pigeonMap['style']! as int]
,
    );
  }
}

class CPListTemplateMessage {
  CPListTemplateMessage({
    required this.elementId,
    this.title,
    required this.sections,
    this.emptyViewTitleVariants,
    this.emptyViewSubtitleVariants,
    required this.showsTabBadge,
    required this.systemIcon,
    this.backButton,
  });

  String elementId;
  String? title;
  List<CPListSectionMessage?> sections;
  List<String?>? emptyViewTitleVariants;
  List<String?>? emptyViewSubtitleVariants;
  bool showsTabBadge;
  String systemIcon;
  CPBarButtonMessage? backButton;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['sections'] = sections;
    pigeonMap['emptyViewTitleVariants'] = emptyViewTitleVariants;
    pigeonMap['emptyViewSubtitleVariants'] = emptyViewSubtitleVariants;
    pigeonMap['showsTabBadge'] = showsTabBadge;
    pigeonMap['systemIcon'] = systemIcon;
    pigeonMap['backButton'] = backButton?.encode();
    return pigeonMap;
  }

  static CPListTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPListTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title'] as String?,
      sections: (pigeonMap['sections'] as List<Object?>?)!.cast<CPListSectionMessage?>(),
      emptyViewTitleVariants: (pigeonMap['emptyViewTitleVariants'] as List<Object?>?)?.cast<String?>(),
      emptyViewSubtitleVariants: (pigeonMap['emptyViewSubtitleVariants'] as List<Object?>?)?.cast<String?>(),
      showsTabBadge: pigeonMap['showsTabBadge']! as bool,
      systemIcon: pigeonMap['systemIcon']! as String,
      backButton: pigeonMap['backButton'] != null
          ? CPBarButtonMessage.decode(pigeonMap['backButton']!)
          : null,
    );
  }
}

class CPAlertActionMessage {
  CPAlertActionMessage({
    required this.elementId,
    required this.title,
    required this.style,
  });

  String elementId;
  String title;
  CPAlertActionStyle style;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['style'] = style.index;
    return pigeonMap;
  }

  static CPAlertActionMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPAlertActionMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      style: CPAlertActionStyle.values[pigeonMap['style']! as int]
,
    );
  }
}

class CPAlertTemplateMessage {
  CPAlertTemplateMessage({
    required this.elementId,
    required this.titleVariants,
    required this.actions,
    required this.onPresent,
  });

  String elementId;
  List<String?> titleVariants;
  List<CPAlertActionMessage?> actions;
  bool onPresent;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['titleVariants'] = titleVariants;
    pigeonMap['actions'] = actions;
    pigeonMap['onPresent'] = onPresent;
    return pigeonMap;
  }

  static CPAlertTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPAlertTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      titleVariants: (pigeonMap['titleVariants'] as List<Object?>?)!.cast<String?>(),
      actions: (pigeonMap['actions'] as List<Object?>?)!.cast<CPAlertActionMessage?>(),
      onPresent: pigeonMap['onPresent']! as bool,
    );
  }
}

class CPActionSheetTemplateMessage {
  CPActionSheetTemplateMessage({
    required this.elementId,
    this.title,
    this.message,
    required this.actions,
  });

  String elementId;
  String? title;
  String? message;
  List<CPAlertActionMessage?> actions;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['message'] = message;
    pigeonMap['actions'] = actions;
    return pigeonMap;
  }

  static CPActionSheetTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPActionSheetTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title'] as String?,
      message: pigeonMap['message'] as String?,
      actions: (pigeonMap['actions'] as List<Object?>?)!.cast<CPAlertActionMessage?>(),
    );
  }
}

class CPTextButtonMessage {
  CPTextButtonMessage({
    required this.elementId,
    required this.title,
    required this.style,
  });

  String elementId;
  String title;
  CPTextButtonStyle style;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['style'] = style.index;
    return pigeonMap;
  }

  static CPTextButtonMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPTextButtonMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      style: CPTextButtonStyle.values[pigeonMap['style']! as int]
,
    );
  }
}

class CPGridButtonMessage {
  CPGridButtonMessage({
    required this.elementId,
    required this.titleVariants,
    required this.image,
  });

  String elementId;
  List<String?> titleVariants;
  CPImageMessage image;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['titleVariants'] = titleVariants;
    pigeonMap['image'] = image.encode();
    return pigeonMap;
  }

  static CPGridButtonMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPGridButtonMessage(
      elementId: pigeonMap['elementId']! as String,
      titleVariants: (pigeonMap['titleVariants'] as List<Object?>?)!.cast<String?>(),
      image: CPImageMessage.decode(pigeonMap['image']!)
,
    );
  }
}

class CPGridTemplateMessage {
  CPGridTemplateMessage({
    required this.elementId,
    required this.title,
    required this.buttons,
  });

  String elementId;
  String title;
  List<CPGridButtonMessage?> buttons;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['buttons'] = buttons;
    return pigeonMap;
  }

  static CPGridTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPGridTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      buttons: (pigeonMap['buttons'] as List<Object?>?)!.cast<CPGridButtonMessage?>(),
    );
  }
}

class CPInformationItemMessage {
  CPInformationItemMessage({
    required this.elementId,
    this.title,
    this.detail,
  });

  String elementId;
  String? title;
  String? detail;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['detail'] = detail;
    return pigeonMap;
  }

  static CPInformationItemMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPInformationItemMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title'] as String?,
      detail: pigeonMap['detail'] as String?,
    );
  }
}

class CPInformationTemplateMessage {
  CPInformationTemplateMessage({
    required this.elementId,
    required this.title,
    required this.layout,
    required this.actions,
    required this.informationItems,
  });

  String elementId;
  String title;
  CPInformationTemplateLayout layout;
  List<CPTextButtonMessage?> actions;
  List<CPInformationItemMessage?> informationItems;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['layout'] = layout.index;
    pigeonMap['actions'] = actions;
    pigeonMap['informationItems'] = informationItems;
    return pigeonMap;
  }

  static CPInformationTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPInformationTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      layout: CPInformationTemplateLayout.values[pigeonMap['layout']! as int]
,
      actions: (pigeonMap['actions'] as List<Object?>?)!.cast<CPTextButtonMessage?>(),
      informationItems: (pigeonMap['informationItems'] as List<Object?>?)!.cast<CPInformationItemMessage?>(),
    );
  }
}

class CPNowPlayingImageButtonMessage {
  CPNowPlayingImageButtonMessage({
    required this.elementId,
    required this.isEnabled,
    required this.isSelected,
    required this.image,
  });

  String elementId;
  bool isEnabled;
  bool isSelected;
  CPImageMessage image;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['isEnabled'] = isEnabled;
    pigeonMap['isSelected'] = isSelected;
    pigeonMap['image'] = image.encode();
    return pigeonMap;
  }

  static CPNowPlayingImageButtonMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPNowPlayingImageButtonMessage(
      elementId: pigeonMap['elementId']! as String,
      isEnabled: pigeonMap['isEnabled']! as bool,
      isSelected: pigeonMap['isSelected']! as bool,
      image: CPImageMessage.decode(pigeonMap['image']!)
,
    );
  }
}

class CPNowPlayingButtonMessage {
  CPNowPlayingButtonMessage({
    this.imageButton,
  });

  CPNowPlayingImageButtonMessage? imageButton;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['imageButton'] = imageButton?.encode();
    return pigeonMap;
  }

  static CPNowPlayingButtonMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPNowPlayingButtonMessage(
      imageButton: pigeonMap['imageButton'] != null
          ? CPNowPlayingImageButtonMessage.decode(pigeonMap['imageButton']!)
          : null,
    );
  }
}

class CPConnectionStatusChangeMessage {
  CPConnectionStatusChangeMessage({
    required this.status,
  });

  CPConnectionStatus status;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['status'] = status.index;
    return pigeonMap;
  }

  static CPConnectionStatusChangeMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPConnectionStatusChangeMessage(
      status: CPConnectionStatus.values[pigeonMap['status']! as int]
,
    );
  }
}

class CPPointOfInterestMessage {
  CPPointOfInterestMessage({
    required this.elementId,
    required this.latitude,
    required this.longitude,
    required this.title,
    this.subtitle,
    this.summary,
    this.detailTitle,
    this.detailsSubtitle,
    this.detailSummary,
    this.image,
    this.primaryButton,
    this.secondaryButton,
  });

  String elementId;
  double latitude;
  double longitude;
  String title;
  String? subtitle;
  String? summary;
  String? detailTitle;
  String? detailsSubtitle;
  String? detailSummary;
  CPImageMessage? image;
  CPTextButtonMessage? primaryButton;
  CPTextButtonMessage? secondaryButton;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['latitude'] = latitude;
    pigeonMap['longitude'] = longitude;
    pigeonMap['title'] = title;
    pigeonMap['subtitle'] = subtitle;
    pigeonMap['summary'] = summary;
    pigeonMap['detailTitle'] = detailTitle;
    pigeonMap['detailsSubtitle'] = detailsSubtitle;
    pigeonMap['detailSummary'] = detailSummary;
    pigeonMap['image'] = image?.encode();
    pigeonMap['primaryButton'] = primaryButton?.encode();
    pigeonMap['secondaryButton'] = secondaryButton?.encode();
    return pigeonMap;
  }

  static CPPointOfInterestMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPPointOfInterestMessage(
      elementId: pigeonMap['elementId']! as String,
      latitude: pigeonMap['latitude']! as double,
      longitude: pigeonMap['longitude']! as double,
      title: pigeonMap['title']! as String,
      subtitle: pigeonMap['subtitle'] as String?,
      summary: pigeonMap['summary'] as String?,
      detailTitle: pigeonMap['detailTitle'] as String?,
      detailsSubtitle: pigeonMap['detailsSubtitle'] as String?,
      detailSummary: pigeonMap['detailSummary'] as String?,
      image: pigeonMap['image'] != null
          ? CPImageMessage.decode(pigeonMap['image']!)
          : null,
      primaryButton: pigeonMap['primaryButton'] != null
          ? CPTextButtonMessage.decode(pigeonMap['primaryButton']!)
          : null,
      secondaryButton: pigeonMap['secondaryButton'] != null
          ? CPTextButtonMessage.decode(pigeonMap['secondaryButton']!)
          : null,
    );
  }
}

class CPPointOfInterestTemplateMessage {
  CPPointOfInterestTemplateMessage({
    required this.elementId,
    required this.title,
    required this.poi,
  });

  String elementId;
  String title;
  List<CPPointOfInterestMessage?> poi;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['poi'] = poi;
    return pigeonMap;
  }

  static CPPointOfInterestTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPPointOfInterestTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title']! as String,
      poi: (pigeonMap['poi'] as List<Object?>?)!.cast<CPPointOfInterestMessage?>(),
    );
  }
}

class CPTabBarTemplateMessage {
  CPTabBarTemplateMessage({
    required this.elementId,
    this.title,
    required this.templates,
  });

  String elementId;
  String? title;
  List<CPListTemplateMessage?> templates;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['elementId'] = elementId;
    pigeonMap['title'] = title;
    pigeonMap['templates'] = templates;
    return pigeonMap;
  }

  static CPTabBarTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPTabBarTemplateMessage(
      elementId: pigeonMap['elementId']! as String,
      title: pigeonMap['title'] as String?,
      templates: (pigeonMap['templates'] as List<Object?>?)!.cast<CPListTemplateMessage?>(),
    );
  }
}

class CPTemplateMessage {
  CPTemplateMessage({
    this.grid,
    this.information,
    this.list,
    this.poi,
    this.tabBar,
  });

  CPGridTemplateMessage? grid;
  CPInformationTemplateMessage? information;
  CPListTemplateMessage? list;
  CPPointOfInterestTemplateMessage? poi;
  CPTabBarTemplateMessage? tabBar;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['grid'] = grid?.encode();
    pigeonMap['information'] = information?.encode();
    pigeonMap['list'] = list?.encode();
    pigeonMap['poi'] = poi?.encode();
    pigeonMap['tabBar'] = tabBar?.encode();
    return pigeonMap;
  }

  static CPTemplateMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPTemplateMessage(
      grid: pigeonMap['grid'] != null
          ? CPGridTemplateMessage.decode(pigeonMap['grid']!)
          : null,
      information: pigeonMap['information'] != null
          ? CPInformationTemplateMessage.decode(pigeonMap['information']!)
          : null,
      list: pigeonMap['list'] != null
          ? CPListTemplateMessage.decode(pigeonMap['list']!)
          : null,
      poi: pigeonMap['poi'] != null
          ? CPPointOfInterestTemplateMessage.decode(pigeonMap['poi']!)
          : null,
      tabBar: pigeonMap['tabBar'] != null
          ? CPTabBarTemplateMessage.decode(pigeonMap['tabBar']!)
          : null,
    );
  }
}

class CPImageMessage {
  CPImageMessage({
    this.systemName,
    this.flutterAsset,
    this.data,
  });

  String? systemName;
  String? flutterAsset;
  Uint8List? data;

  Object encode() {
    final Map<Object?, Object?> pigeonMap = <Object?, Object?>{};
    pigeonMap['systemName'] = systemName;
    pigeonMap['flutterAsset'] = flutterAsset;
    pigeonMap['data'] = data;
    return pigeonMap;
  }

  static CPImageMessage decode(Object message) {
    final Map<Object?, Object?> pigeonMap = message as Map<Object?, Object?>;
    return CPImageMessage(
      systemName: pigeonMap['systemName'] as String?,
      flutterAsset: pigeonMap['flutterAsset'] as String?,
      data: pigeonMap['data'] as Uint8List?,
    );
  }
}

class _CarplayApiCodec extends StandardMessageCodec {
  const _CarplayApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CPActionSheetTemplateMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPAlertActionMessage) {
      buffer.putUint8(129);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPAlertTemplateMessage) {
      buffer.putUint8(130);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPBarButtonMessage) {
      buffer.putUint8(131);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPGridButtonMessage) {
      buffer.putUint8(132);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPGridTemplateMessage) {
      buffer.putUint8(133);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPImageMessage) {
      buffer.putUint8(134);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPImageMessage) {
      buffer.putUint8(135);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPInformationItemMessage) {
      buffer.putUint8(136);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPInformationTemplateMessage) {
      buffer.putUint8(137);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPListItemMessage) {
      buffer.putUint8(138);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPListSectionMessage) {
      buffer.putUint8(139);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPListTemplateMessage) {
      buffer.putUint8(140);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPNowPlayingButtonMessage) {
      buffer.putUint8(141);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPNowPlayingImageButtonMessage) {
      buffer.putUint8(142);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPPointOfInterestMessage) {
      buffer.putUint8(143);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPPointOfInterestTemplateMessage) {
      buffer.putUint8(144);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPTabBarTemplateMessage) {
      buffer.putUint8(145);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPTemplateMessage) {
      buffer.putUint8(146);
      writeValue(buffer, value.encode());
    } else 
    if (value is CPTextButtonMessage) {
      buffer.putUint8(147);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CPActionSheetTemplateMessage.decode(readValue(buffer)!);
      
      case 129:       
        return CPAlertActionMessage.decode(readValue(buffer)!);
      
      case 130:       
        return CPAlertTemplateMessage.decode(readValue(buffer)!);
      
      case 131:       
        return CPBarButtonMessage.decode(readValue(buffer)!);
      
      case 132:       
        return CPGridButtonMessage.decode(readValue(buffer)!);
      
      case 133:       
        return CPGridTemplateMessage.decode(readValue(buffer)!);
      
      case 134:       
        return CPImageMessage.decode(readValue(buffer)!);
      
      case 135:       
        return CPImageMessage.decode(readValue(buffer)!);
      
      case 136:       
        return CPInformationItemMessage.decode(readValue(buffer)!);
      
      case 137:       
        return CPInformationTemplateMessage.decode(readValue(buffer)!);
      
      case 138:       
        return CPListItemMessage.decode(readValue(buffer)!);
      
      case 139:       
        return CPListSectionMessage.decode(readValue(buffer)!);
      
      case 140:       
        return CPListTemplateMessage.decode(readValue(buffer)!);
      
      case 141:       
        return CPNowPlayingButtonMessage.decode(readValue(buffer)!);
      
      case 142:       
        return CPNowPlayingImageButtonMessage.decode(readValue(buffer)!);
      
      case 143:       
        return CPPointOfInterestMessage.decode(readValue(buffer)!);
      
      case 144:       
        return CPPointOfInterestTemplateMessage.decode(readValue(buffer)!);
      
      case 145:       
        return CPTabBarTemplateMessage.decode(readValue(buffer)!);
      
      case 146:       
        return CPTemplateMessage.decode(readValue(buffer)!);
      
      case 147:       
        return CPTextButtonMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}

class CarplayApi {
  /// Constructor for [CarplayApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  CarplayApi({BinaryMessenger? binaryMessenger}) : _binaryMessenger = binaryMessenger;

  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _CarplayApiCodec();

  Future<bool> setRootTemplate(CPTemplateMessage arg_template, bool arg_animate) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.setRootTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_template, arg_animate]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> pushTemplate(CPTemplateMessage arg_template, bool arg_animate) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.pushTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_template, arg_animate]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> pushNowPlaying(bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.pushNowPlaying', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> popTemplate(bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.popTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> popToRootTemplate(bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.popToRootTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> presentAlertTemplate(CPAlertTemplateMessage arg_template, bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.presentAlertTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_template, arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> presentActionSheetTemplate(CPActionSheetTemplateMessage arg_template, bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.presentActionSheetTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_template, arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> dismissTemplate(bool arg_animated) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.dismissTemplate', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_animated]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> updateNowPlayingButtons(List<CPNowPlayingButtonMessage?> arg_buttons) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.updateNowPlayingButtons', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_buttons]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> setNowPlayingUpNextButtonTitle(String arg_title) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.setNowPlayingUpNextButtonTitle', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_title]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> enableNowPlayingUpNextButton(String? arg_title) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.enableNowPlayingUpNextButton', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_title]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> disableNowPlayingUpNextButton() async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.disableNowPlayingUpNextButton', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(null) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> updateListItem(CPListItemMessage arg_updatedItem) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.updateListItem', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_updatedItem]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<bool> updateListSections(String arg_listId, List<CPListSectionMessage?> arg_sections) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.updateListSections', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_listId, arg_sections]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else if (replyMap['result'] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyMap['result'] as bool?)!;
    }
  }

  Future<void> onListItemSelectedComplete(String arg_listItemId) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.CarplayApi.onListItemSelectedComplete', codec, binaryMessenger: _binaryMessenger);
    final Map<Object?, Object?>? replyMap =
        await channel.send(<Object?>[arg_listItemId]) as Map<Object?, Object?>?;
    if (replyMap == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyMap['error'] != null) {
      final Map<Object?, Object?> error = (replyMap['error'] as Map<Object?, Object?>?)!;
      throw PlatformException(
        code: (error['code'] as String?)!,
        message: error['message'] as String?,
        details: error['details'],
      );
    } else {
      return;
    }
  }
}

class _CarplayEventsApiCodec extends StandardMessageCodec {
  const _CarplayEventsApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is CPConnectionStatusChangeMessage) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else 
{
      super.writeValue(buffer, value);
    }
  }
  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128:       
        return CPConnectionStatusChangeMessage.decode(readValue(buffer)!);
      
      default:      
        return super.readValueOfType(type, buffer);
      
    }
  }
}
abstract class CarplayEventsApi {
  static const MessageCodec<Object?> codec = _CarplayEventsApiCodec();

  void onConnectionChange(CPConnectionStatusChangeMessage data);
  void onListItemSelected(String elementId);
  void onAlertActionPressed(String elementId);
  void onPresentStateChanged(bool completed);
  void onGridButtonPressed(String elementId);
  void onBarButtonPressed(String elementId);
  void onTextButtonPressed(String elementId);
  void onNowPlayingButtonPressed(String elementId);
  void onNowPlayingUpNextButtonPressed();
  void onHistoryStackChanged(List<String?> historyStack);
  static void setup(CarplayEventsApi? api, {BinaryMessenger? binaryMessenger}) {
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onConnectionChange', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onConnectionChange was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final CPConnectionStatusChangeMessage? arg_data = (args[0] as CPConnectionStatusChangeMessage?);
          assert(arg_data != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onConnectionChange was null, expected non-null CPConnectionStatusChangeMessage.');
          api.onConnectionChange(arg_data!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onListItemSelected', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onListItemSelected was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onListItemSelected was null, expected non-null String.');
          api.onListItemSelected(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onAlertActionPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onAlertActionPressed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onAlertActionPressed was null, expected non-null String.');
          api.onAlertActionPressed(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onPresentStateChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onPresentStateChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final bool? arg_completed = (args[0] as bool?);
          assert(arg_completed != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onPresentStateChanged was null, expected non-null bool.');
          api.onPresentStateChanged(arg_completed!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onGridButtonPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onGridButtonPressed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onGridButtonPressed was null, expected non-null String.');
          api.onGridButtonPressed(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onBarButtonPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onBarButtonPressed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onBarButtonPressed was null, expected non-null String.');
          api.onBarButtonPressed(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onTextButtonPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onTextButtonPressed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onTextButtonPressed was null, expected non-null String.');
          api.onTextButtonPressed(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onNowPlayingButtonPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onNowPlayingButtonPressed was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final String? arg_elementId = (args[0] as String?);
          assert(arg_elementId != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onNowPlayingButtonPressed was null, expected non-null String.');
          api.onNowPlayingButtonPressed(arg_elementId!);
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onNowPlayingUpNextButtonPressed', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          // ignore message
          api.onNowPlayingUpNextButtonPressed();
          return;
        });
      }
    }
    {
      final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
          'dev.flutter.pigeon.CarplayEventsApi.onHistoryStackChanged', codec, binaryMessenger: binaryMessenger);
      if (api == null) {
        channel.setMessageHandler(null);
      } else {
        channel.setMessageHandler((Object? message) async {
          assert(message != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onHistoryStackChanged was null.');
          final List<Object?> args = (message as List<Object?>?)!;
          final List<String?>? arg_historyStack = (args[0] as List<Object?>?)?.cast<String?>();
          assert(arg_historyStack != null, 'Argument for dev.flutter.pigeon.CarplayEventsApi.onHistoryStackChanged was null, expected non-null List<String?>.');
          api.onHistoryStackChanged(arg_historyStack!);
          return;
        });
      }
    }
  }
}
